{"version":3,"sources":["components/Header/Header.js","components/SearchForm/SearchForm.js","components/UserCard/UserCard.js","components/ErrorModal/ErrorModal.js","pages/SearchPage/SearchPage.js","components/RepoCard/RepoCard.js","pages/RepoPage/RepoPage.js","App.js","serviceWorker.js","redux/rootReducer.js","redux/action.types.js","redux/store.js","index.js"],"names":["Header","className","SearchForm","props","onSubmit","submitForm","placeholder","name","value","inputValue","onChange","changedValue","type","disabledButton","disabled","UserCard","loginData","length","onClick","getRepo","src","avatar","alt","description","slice","ErrorModal","Fragment","onClose","messageErr","children","SearchPage","useState","setName","userName","setUserName","userDescription","setUserDescription","setAvatar","userRepoLink","setUserRepoLink","userRepos","setUserRepos","setInputValue","error","setError","history","useHistory","useEffect","resetUserRepos","setData","bio","avatar_url","login","repos_url","cleanInputs","e","preventDefault","fetch","then","res","status","json","data","catch","err","console","log","target","push","pathname","customData","message","RepoCard","repoName","repoDescription","stargazers","watchers","forks","dateCreated","href","link","rel","RepoPage","usersRepos","setUsersRepos","location","map","repo","created_at","forks_count","html_url","key","id","licenceType","license","stargazers_count","watchers_count","to","App","basename","path","exact","component","Boolean","window","hostname","match","initialState","apiDataReducer","state","action","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wYAWeA,G,YARA,WACX,OACI,yBAAKC,UAAU,eACX,sD,OCkBGC,G,MArBI,SAACC,GAChB,OACI,6BACI,0BAAMC,SAAUD,EAAME,YAClB,6BACI,2BACIJ,UAAU,aACVK,YAAY,eACZC,KAAK,OACLC,MAAOL,EAAMM,WACbC,SAAUP,EAAMQ,aAChBC,KAAK,SAGT,4BAAQX,UAAWE,EAAMU,eAAiB,mBAAqB,eAAgBD,KAAK,SAASE,SAAUX,EAAMU,gBAA7G,eCGLE,G,MAjBE,SAACZ,GACd,OACI,6BACgC,IAA3BA,EAAMa,UAAUC,OAAe,GAAK,qDACT,IAA3Bd,EAAMa,UAAUC,OAAe,mGAC5B,4BAAQC,QAASf,EAAMgB,QAASP,KAAK,SAASX,UAAU,gBACpD,6BACI,yBAAKmB,IAAKjB,EAAMkB,OAAQC,IAAKnB,EAAMI,OACnC,4BAAMJ,EAAMI,KAAsCJ,EAAMI,KAArC,8BACnB,2BAAKJ,EAAMoB,YAA2CpB,EAAMoB,YAAYC,MAAM,EAAG,IAAM,MAA9D,iCCSlCC,G,MAjBI,SAACtB,GAChB,OACI,kBAAC,IAAMuB,SAAP,KACI,yBAAKzB,UAAU,WAAWiB,QAASf,EAAMwB,UACzC,yBAAK1B,UAAU,eACX,4BAAKE,EAAMyB,YACX,2BAAIzB,EAAM0B,UACV,yBAAK5B,UAAU,wBACX,4BAAQW,KAAK,SAASM,QAASf,EAAMwB,SAArC,aCqFLG,G,MAzFI,WAAO,IAAD,EACGC,mBAAS,IADZ,mBACdxB,EADc,KACRyB,EADQ,OAEWD,mBAAS,IAFpB,mBAEdE,EAFc,KAEJC,EAFI,OAGyBH,mBAAS,IAHlC,mBAGdI,EAHc,KAGGC,EAHH,OAIOL,mBAAS,IAJhB,mBAIdV,EAJc,KAINgB,EAJM,OAKmBN,mBAAS,IAL5B,mBAKdO,EALc,KAKAC,EALA,OAMaR,mBAAS,IANtB,mBAMdS,EANc,KAMHC,EANG,OAOeV,mBAAS,IAPxB,mBAOdtB,EAPc,KAOFiC,EAPE,OAQKX,mBAAS,IARd,mBAQdY,EARc,KAQPC,EARO,KASfC,EAAUC,cAEhBC,qBAAU,cAEP,IAEH,IAmBMC,EAAiB,WACnBP,EAAa,KAGjBM,qBAAU,cACP,CAACP,EAAWF,IAEf,IAAMW,EAAU,SAAC,GAAiD,IAA/C1C,EAA8C,EAA9CA,KAAM2C,EAAwC,EAAxCA,IAAKC,EAAmC,EAAnCA,WAAYC,EAAuB,EAAvBA,MAAOC,EAAgB,EAAhBA,UAC7CrB,EAAQzB,GACR2B,EAAYkB,GACZhB,EAAmBc,GACnBb,EAAUc,GACVZ,EAAgBc,IAqBdC,EAAc,WAChBZ,EAAc,KAGlB,OACI,6BACKC,GAAS,kBAAC,EAAD,CAAYhB,QAXX,WACfiB,EAAS,MACTU,KAS+C1B,WAAYe,IACvD,kBAAC,EAAD,CACIlC,WAAYA,EACZJ,WA7DY,SAACkD,GACrBA,EAAEC,iBACFC,MAAM,gCAAD,OAAiChD,IACjCiD,MAAK,SAAAC,GACF,GAAmB,MAAfA,EAAIC,OACJ,OAAOD,EAAIE,OACW,MAAfF,EAAIC,OACXhB,EAAS,oDAETA,EAAS,8CAGhBc,MAAK,SAAAI,GACFb,EAAQa,MAEXC,OAAM,SAACC,GAAD,OAASC,QAAQC,IAAIF,MAChChB,KA8CQrC,aAAc,SAAA4C,GAAC,OAAIb,EAAca,EAAEY,OAAO3D,QAC1CK,eAAsC,IAAtBJ,EAAWQ,SAC/B,kBAAC,EAAD,CACII,OAAQA,EACRd,KAAMA,EACNgB,YAAaY,EACbhB,QAlCQ,WAChBsC,MAAM,GAAD,OAAInB,IACJoB,MAAK,SAAAC,GAAG,OAAIA,EAAIE,UAChBH,MAAK,SAAAI,GACFrB,EAAaqB,GACbjB,EAAQuB,KAAK,CACTC,SAAU,oCACVC,WAAYR,OAGnBC,OAAM,SAACC,GAAD,OAAUC,QAAQC,IAAIF,EAAIO,aAyB7BvD,UAAWiB,OCxEZuC,G,MAjBE,SAACrE,GACd,OACI,yBAAKF,UAAU,YACX,4BAAI,+CAA6BE,EAAMsE,UACvC,4BAAI,iDAAgCtE,EAAMuE,gBAAqCvE,EAAMuE,gBAAzB,kBAC5D,yBAAKzE,UAAU,qBACX,2BAAG,gDAA8BE,EAAMwE,YACvC,2BAAG,8CAA4BxE,EAAMyE,UACrC,2BAAG,2CAAyBzE,EAAM0E,OAClC,2BAAG,gDAA8B1E,EAAM2E,YAAYtD,MAAM,EAAG,MAGhE,uBAAGvB,UAAU,WAAW8E,KAAM5E,EAAM6E,KAAMb,OAAO,SAASc,IAAI,uBAA9D,gBCiBGC,G,MA3BE,SAAC/E,GAAW,IAAD,EACY4B,mBAAS,IADrB,mBACjBoD,EADiB,KACLC,EADK,KAKxB,OAHArC,qBAAU,WACNqC,EAAcjF,EAAMkF,SAASf,cAC9B,IAEC,yBAAKrE,UAAU,yBACX,4BAAMkF,EAAiC,iCAApB,mBACnB,yBAAKlF,UAAU,sBACVkF,GAAcA,EAAWG,KAAI,SAAAC,GAAI,OAAI,kBAAC,EAAD,CAClCb,gBAAiBa,EAAKhE,YACtBuD,YAAaS,EAAKC,WAClBX,MAAOU,EAAKE,YACZT,KAAMO,EAAKG,SACXC,IAAKJ,EAAKK,GACVC,YAAaN,EAAKO,QAClBrB,SAAUc,EAAKhF,KACfoE,WAAYY,EAAKQ,iBACjBnB,SAAUW,EAAKS,qBAIvB,kBAAC,IAAD,CAAMC,GAAG,uBAAuBhG,UAAU,eAA1C,0BCDGiG,MAnBf,WACE,OACE,yBAAKjG,UAAU,OACb,kBAAC,IAAD,CAAYkG,SAAS,KAEnB,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,uBAAuBC,OAAK,EAACC,UAAWxE,IACpD,kBAAC,IAAD,CAAOsE,KAAK,oCAAoCE,UAAWpB,SCJnDqB,QACW,cAA7BC,OAAOnB,SAASoB,UAEe,UAA7BD,OAAOnB,SAASoB,UAEhBD,OAAOnB,SAASoB,SAASC,MACvB,2D,oCCdAC,EAAe,CACjBpG,KAAM,GACN0B,SAAU,GACVE,gBAAiB,GACjBd,OAAQ,GACRiB,aAAc,GACdE,UAAW,GACX/B,WAAY,GACZkC,MAAO,MAeIiE,EAZQ,WAAmC,IAAlCC,EAAiC,uDAAzBF,EAAcG,EAAW,uCACrD,OAAQA,EAAOlG,MACX,ICXuB,kBDYnB,OAAO,2BACAiG,GADP,IAEIpG,WAAYqG,EAAOvD,IAE3B,QACI,OAAOsD,IEnBbE,EAAmBP,OAAOQ,sCAAwCC,IAOzDC,EALDC,YACVP,EACAG,EAAiBK,YAAgBC,OCArCC,IAASC,OACP,kBAAC,IAAD,CAAUL,MAAOA,GACf,kBAAC,IAAMM,WAAP,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SJqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnE,MAAK,SAAAoE,GACJA,EAAaC,gBAEdhE,OAAM,SAAApB,GACLsB,QAAQtB,MAAMA,EAAM4B,c","file":"static/js/main.5412445e.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Header.scss';\r\n\r\nconst Header = () => {\r\n    return (\r\n        <div className=\"header-cont\">\r\n            <h2>Search GitHub users</h2>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport './SearchForm.scss'\r\n\r\nconst SearchForm = (props) => {\r\n    return (\r\n        <div>\r\n            <form onSubmit={props.submitForm}>\r\n                <div>\r\n                    <input\r\n                        className=\"input-form\"\r\n                        placeholder='Search Users'\r\n                        name='name'\r\n                        value={props.inputValue}\r\n                        onChange={props.changedValue}\r\n                        type=\"text\"\r\n\r\n                    />\r\n                    <button className={props.disabledButton ? \"input-button-dis\" : \"input-button\"} type=\"submit\" disabled={props.disabledButton}>Submit</button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchForm;","import React from 'react';\r\nimport './UserCard.scss';\r\n\r\nconst UserCard = (props) => {\r\n    return (\r\n        <div>\r\n            {props.loginData.length === 0 ? \"\" : <h1>Card for matched user</h1>}\r\n            {props.loginData.length === 0 ? <h1>List is empty, please type characters in the form and press Submit!</h1> :\r\n                <button onClick={props.getRepo} type=\"submit\" className=\"userCardLink\">\r\n                    <div>\r\n                        <img src={props.avatar} alt={props.name} />\r\n                        <h1>{!props.name ? \"User did not defind a name\" : props.name}</h1>\r\n                        <p>{!props.description ? \"User has no descritpion!\" : props.description.slice(0, 90) + '...'}</p>\r\n                    </div>\r\n                </button>\r\n            }\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default UserCard;","import React from 'react';\r\n\r\nimport './ErrorModal.scss';\r\n\r\nconst ErrorModal = (props) => {\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"backdrop\" onClick={props.onClose} />\r\n            <div className=\"error-modal\">\r\n                <h2>{props.messageErr}</h2>\r\n                <p>{props.children}</p>\r\n                <div className=\"error-modal__actions\">\r\n                    <button type=\"button\" onClick={props.onClose}>\r\n                        Okay\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default ErrorModal;","import React, { useState, useEffect } from 'react';\r\nimport SearchForm from '../../components/SearchForm/SearchForm';\r\nimport UserCard from '../../components/UserCard/UserCard';\r\nimport ErrorModal from '../../components/ErrorModal/ErrorModal';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport './SearchPage.scss';\r\n\r\nconst SearchPage = () => {\r\n    const [name, setName] = useState('');\r\n    const [userName, setUserName] = useState('');\r\n    const [userDescription, setUserDescription] = useState('');\r\n    const [avatar, setAvatar] = useState('');\r\n    const [userRepoLink, setUserRepoLink] = useState('');\r\n    const [userRepos, setUserRepos] = useState([]);\r\n    const [inputValue, setInputValue] = useState('');\r\n    const [error, setError] = useState('');\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n\r\n    }, [])\r\n\r\n    const getUsersFromApi = (e) => {\r\n        e.preventDefault();\r\n        fetch(`https://api.github.com/users/${inputValue}`)\r\n            .then(res => {\r\n                if (res.status === 200) {\r\n                    return res.json();\r\n                } else if (res.status === 404) {\r\n                    setError(\"User Not Found! Please try with some other name!\")\r\n                } else {\r\n                    setError(\"Something went wrong! Please try again!\")\r\n                }\r\n            })\r\n            .then(data => {\r\n                setData(data);\r\n            })\r\n            .catch((err) => console.log(err));\r\n        resetUserRepos();\r\n    }\r\n\r\n    const resetUserRepos = () => {\r\n        setUserRepos([]);\r\n    }\r\n\r\n    useEffect(() => {\r\n    }, [userRepos, userRepoLink])\r\n\r\n    const setData = ({ name, bio, avatar_url, login, repos_url }) => {\r\n        setName(name);\r\n        setUserName(login);\r\n        setUserDescription(bio);\r\n        setAvatar(avatar_url);\r\n        setUserRepoLink(repos_url)\r\n    }\r\n\r\n    const repoHandler = () => {\r\n        fetch(`${userRepoLink}`)\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                setUserRepos(data);\r\n                history.push({\r\n                    pathname: '/search-github-users/repositories',\r\n                    customData: data\r\n                });\r\n            })\r\n            .catch((err) => (console.log(err.message)))\r\n    }\r\n\r\n    const cleanError = () => {\r\n        setError(null);\r\n        cleanInputs();\r\n    }\r\n\r\n    const cleanInputs = () => {\r\n        setInputValue(\"\");\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {error && <ErrorModal onClose={cleanError} messageErr={error} />}\r\n            <SearchForm\r\n                inputValue={inputValue}\r\n                submitForm={getUsersFromApi}\r\n                changedValue={e => setInputValue(e.target.value)}\r\n                disabledButton={inputValue.length === 0 ? true : false} />\r\n            <UserCard\r\n                avatar={avatar}\r\n                name={name}\r\n                description={userDescription}\r\n                getRepo={repoHandler}\r\n                loginData={userName} />\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default SearchPage;","import React from 'react';\r\nimport './RepoCard.scss';\r\n\r\nconst RepoCard = (props) => {\r\n    return (\r\n        <div className=\"repoCard\">\r\n            <h3><strong>Repo Name: </strong>{props.repoName}</h3>\r\n            <h5><strong>Description: </strong>{!props.repoDescription ? \"No Descritpion\" : props.repoDescription}</h5>\r\n            <div className=\"bottomRowRepoCard\">\r\n                <p><strong>Stargazers: </strong>{props.stargazers}</p>\r\n                <p><strong>Watchers: </strong>{props.watchers}</p>\r\n                <p><strong>Forks: </strong>{props.forks}</p>\r\n                <p><strong>Created at: </strong>{props.dateCreated.slice(0, 10)}</p>\r\n                {/* <p><strong>Licence Type: </strong> {!props.licenceType ? \"No Licence Type\" : props.licenceType}</p> */}\r\n            </div>\r\n            <a className=\"repoButt\" href={props.link} target=\"_blank\" rel=\"noopener noreferrer\">View repo</a>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RepoCard;","import React, { useState, useEffect } from 'react';\r\nimport RepoCard from '../../components/RepoCard/RepoCard';\r\nimport { Link } from 'react-router-dom';\r\nimport './RepoPage.scss';\r\n\r\nconst RepoPage = (props) => {\r\n    const [usersRepos, setUsersRepos] = useState([]);\r\n    useEffect(() => {\r\n        setUsersRepos(props.location.customData);\r\n    }, [])\r\n    return (\r\n        <div className=\"repoPageMainContainer\">\r\n            <h1>{!usersRepos ? 'No repositories' : \"Repositories for selected user\"}</h1>\r\n            <div className=\"reposCardContainer\">\r\n                {usersRepos && usersRepos.map(repo => <RepoCard\r\n                    repoDescription={repo.description}\r\n                    dateCreated={repo.created_at}\r\n                    forks={repo.forks_count}\r\n                    link={repo.html_url}\r\n                    key={repo.id}\r\n                    licenceType={repo.license}\r\n                    repoName={repo.name}\r\n                    stargazers={repo.stargazers_count}\r\n                    watchers={repo.watchers_count} />\r\n                )\r\n                }\r\n            </div>\r\n            <Link to=\"/search-github-users\" className=\"back-button\">Back to Search Page</Link>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RepoPage;","import React from 'react';\nimport { BrowserRouter as Router, Route, HashRouter, Switch } from 'react-router-dom';\nimport './App.scss';\nimport Header from './components/Header/Header';\nimport SearchPage from './pages/SearchPage/SearchPage'\nimport RepoPage from './pages/RepoPage/RepoPage';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <HashRouter basename=\"/\">\n\n        <Header />\n        <Router>\n          <Switch>\n            <Route path=\"/search-github-users\" exact component={SearchPage} />\n            <Route path=\"/search-github-users/repositories\" component={RepoPage} />\n          </Switch>\n        </Router>\n      </HashRouter>\n\n    </div>\n  );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\r\n    GET_INPUT_VALUE,\r\n} from './action.types';\r\n\r\nconst initialState = {\r\n    name: '',\r\n    userName: '',\r\n    userDescription: '',\r\n    avatar: '',\r\n    userRepoLink: '',\r\n    userRepos: [],\r\n    inputValue: '',\r\n    error: null\r\n}\r\n\r\nconst apiDataReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case GET_INPUT_VALUE:\r\n            return {\r\n                ...state,\r\n                inputValue: action.e\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default apiDataReducer;\r\n","export const GET_NAME = 'GET_NAME';\r\nexport const GET_USER_NAME = 'GET_USER_NAME';\r\nexport const GET_USER_DESCRIPTION = 'GET_USER_DESCRIPTION';\r\nexport const GET_USER_AVATAR = 'GET_USER_AVATAR';\r\nexport const GET_USER_REPO_LINK = 'GET_USER_REPO_LINK';\r\nexport const GET_USER_REPOS = 'GET_USER_REPOS';\r\nexport const GET_INPUT_VALUE = 'GET_INPUT_VALUE';\r\nexport const GET_ERROR = 'GET_ERROR';","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport apiDataReducer from './rootReducer';\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst store = createStore(\r\n    apiDataReducer,\r\n    composeEnhancers(applyMiddleware(thunk))\r\n);\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}